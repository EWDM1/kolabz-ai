
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ftgtlhdocyixykjkbfpr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ0Z3RsaGRvY3lpeHlramtiZnByIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1ODEyMTYsImV4cCI6MjA1NjE1NzIxNn0.s8HecgCJQOsuM8qiidLASVTWllyvJH7NAoizscI7YRk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to get the current authenticated user
export const getCurrentUser = async () => {
  const { data, error } = await supabase.auth.getUser();
  
  if (error) {
    console.error('Error getting current user:', error);
    return null;
  }
  
  return data?.user || null;
};

// Check if current user has a specific role
export const hasRole = async (role: string): Promise<boolean> => {
  try {
    const user = await getCurrentUser();
    
    if (!user) return false;
    
    const { data, error } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_id', user.id)
      .eq('role', role as any) // Cast to any to avoid type issues with the Enum
      .single();
    
    if (error && error.code !== 'PGRST116') {
      console.error('Error checking role:', error);
      return false;
    }
    
    return !!data;
  } catch (error) {
    console.error('Error in hasRole:', error);
    return false;
  }
};

// Check if the current user is an admin
export const isAdmin = async (): Promise<boolean> => {
  return hasRole('admin') || hasRole('superadmin');
};

// Check if the current user has access to a specific feature
export const hasFeatureAccess = async (featureKey: string): Promise<boolean> => {
  try {
    const user = await getCurrentUser();
    
    if (!user) return false;
    
    const { data, error } = await supabase.rpc(
      'has_feature_access',
      { user_id: user.id, feature_key: featureKey }
    );
    
    if (error) {
      console.error('Error checking feature access:', error);
      return false;
    }
    
    return !!data;
  } catch (error) {
    console.error('Error in hasFeatureAccess:', error);
    return false;
  }
};
